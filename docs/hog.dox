/*!
 * \mainpage HOG Documentation
 * 
 * HOG [Hierarchical Open Graph] is collection of classes and a
 * simulation which are designed as a simple model of RTS or other
 * clocked simulation environments. This page will give a simple
 * overview of how HOG works and how to get started using it.
 *
 * If you prefer just to dig into the code and get started,
 * \ref sample.cpp is a sample file showing how to create and
 * customize the simulation, add units, process key commands, and
 * process command-line arguments.
 * 
 * Documentation contents:
 *
 * \ref Overview - Capabilities of HOG
 *
 * \ref Units - The basic world objects
 *
 * \ref Unit-Groups - Shared memory for units
 *
 * \ref Simulations - Simulating the world
 * 
 * \ref Abstractions - Spacial abstractions of maps
 *
 * \ref Starting - Putting it all together
 *
 * \ref Memory - Memory Management
 *
 * \ref CVS - Getting started with HOG and CVS
 *
 */

///////////////////////////////////////////////

/*! \page Overview Overview of HOG capabilities

\section OVER Overview

HOG is a tile-based simulation designed to provide a simple
experiment environment useful for RTS and other games. Although
it is based on a simple simulation model, it contains state-of-the-art
algorithms for pathfinding and map abstraction.

The heart of HOG is a clock-based simulation. An external program
advances HOG's simulation clock and displays (via OpenGL) the current
view of the world. It is not necessary to understand how the front
end works or to understand openGL in order to use HOG. Instead, you
can just create simple units which interact with their surroundings.

Next page \ref Units
*/

///////////////////////////////////////////////

/*! \page Units Basic World Objects

\section U_TYPES Types of units

There are two basic types of units that can exist in the world, display units
and world units. Display units are drawn into the world, and can be used as
placeholders in the world, but they can never move or do any calculations.
Also, display units do not block other units in the world.
A world unit is the basic type of unit that can move around the world, which
will be described in more detail in the next section.

The unit type is specified from the result returned by the function
\ref getObjectType.

\section U_MOVING Moving in the world

The unit is the most basic object in the world. At each time step in the world
a unit is asked which direction it wants to move via the function
\ref makeMove. For a moment we'll ignore the parameters to makeMove, and focus
on the calling conventions. When asked to make a move, a unit must
return the direction it would like to move, one of:
kN, kNE, kE, kSE, kS, kSW, kW, kNW. Additionally, if the unit does not wish
to move, it can return kStay. And, if the unit is allowed to teleport, it
can return kTeleport.

After returing a value from makeMove, the unit simulation verifies that the move
is legal, and then calls updateLocation on the unit, informing the unit of its
current location and whether the previous move was successful or not.
If a unit returns kTeleport the simulation will call \ref getLocation on the
unit and move the unit directly to the returned location.

The unit simulation measures the amount of thinking time used by each unit in
both the makeMove and setLocation functions. Details of how these measurements are
used can be found in \ref Simulations.

\section PROVIDERS Map and Reservation providers

When a unit is asked to move it is provided with a map provider and a reservation
provider. A map provider can return both a map of the world and an abstract map
of the world. The unit can locate itself on the map and use that information to
do any planning in the map world. The maps are not guaranteed to be exact
representations of the world. For instance, if a unit is exploring the world
the map may change as new parts of the world are explored.

Similarly, a reservation provider can provide information about the other
units in the world and make reservations for paths the unit would like to
travel. But, like the maps, the information provided by the reservation provider
may not be completely accurate. A unit, for instance, may only know about
the other units in his vicinity, or reservations may only be shared by a select
group of units. There is no default implementation for reservations, so
units will always successfully make their reservations.

\section UNIT_IMP Provided unit implementations

The file \ref unit.h declares the basic unit class, as well as a few simple
implementations: a teleporting unit, a randomly moving unit, and a unit that
uses the right-hand-rule to walk around the world. (Note that if the right-hand-rule
unit is not next to a wall it will just walk in cicles.)

In the shared directory more one useful unit class is defined: a search unit. The
search unit takes a search algorithm as a parameter. This unit asks the search
algorithm to plan a path for the unit, and then caches the path returned
by the unit, executing it one step at a time in the world.

Prev: \ref Overview Next: \ref Unit-Groups
*/

///////////////////////////////////////////////

/*! \page Unit-Groups Shared memory for units

\section UG Unit-Groups: Shared memory for units

By itself a single unit has only limited usefulness for experiments. In practice
we may want many units to share a view of the world, or to cooperate in building
a map or pathing through the world. Unit groups are the best mechanism for such
needs.

If a unit is part of a unit group, the simulation will ask the unit group to make
a move on behalf of each unit in that group. Usually the simulation will do some
pre-processing on that request, and then ask the unit which move it would like
to make, returning the result to the simulation.

An example would be a group of units that build a map together \ref SharedAMapGroup.
In this example the unit group is responsible for building a localized unit view
of the world based on the global view provided by the simulation. So, each
time a unit moves, the SharedAMapGroup first intervenes to see if the unit has
explored any new territory, and if it has, it updates the local (partially complete)
map in the unitGroup. Then, the unitGroup tells the unit to move, passing itself
as a map provider.

For each step in the unit simulation, a unit group has the chance to do its
own processing via the \ref think function.

Prev: \ref Units Next: \ref Simulations
*/

///////////////////////////////////////////////

/*! \page Simulations Simulating the world

\section SIM Simulating the world

The unitSimulation is in charge of allowing units to move around the world,
enforcing limits on where units can move. The unitSimulation also maintains
the world clock and draws the world when a visual display is needed.

As units and unit groups are created they must be added to the simulation.
Units can optionally be specified as non-blocking when they are added to the
simulation.

The most important function for a unitSimulation is stepTime, where all units
are advanced forward in time by that increment of time. There are many different
simulation options that can be set to provide slightly different simulation
parameters. See the \ref unitSimulation documentation for more details on these.

A unit simulation can be paused. If paused, all calls to stepTime will be
ignored until the simulation is unpaused.

Prev: \ref Unit-Groups Next: \ref Abstractions
*/

///////////////////////////////////////////////

/*! \page Abstractions Spacial abstractions of maps

\section ABS Spacial abstractions of maps

The point of this document is not to completely explain spacial abstractions,
but to give an overview of how they work. Technical reserach papers are available
which give a more in-depth overview of the concepts involved. See:

http://www.cs.ualberta.ca/~nathanst/papers.html

That being said, map abstractions are used widely within the HOG environment.
The \ref mapAbstraction class contains the relevant functions for converting between
map coordinates (getNodeFromMap) and extracting information about the abstractions
available.

The function \ref getAbstractGraph will return an abstract graph at any particular
level of abstraction. At the lowest level of abstraction this is just a connectivity
map of the underlying map, with each node in the graph corresponding to a tile on the
Map, and each edge representing that a unit can travel directly from one tile (node)
to another.

Each node has a set of labels describing the place of that node in the hierarcy of
abstractions. Each label can either be accessed as a LONG value or a FLOATING POINT
value. The labels are as follows:

  kAbstractionLevel (LONG) The level of abstraction in the graph. Level 0 is the original map.

  kNumAbstractedNodes (LONG) The number of nodes abstracted by a particular node. The node ID's of these
                             nodes are stored in kFirstData (1...kNumAbstracted Nodes). At level 0
                             this value will always be 0.

  kParent (LONG) The parent that abstracts this node in the next abstraction level of the graph.

  kTemporaryLabel This label can be used temporarily by any 

  kXCoordinate (private cache) kYCoordinate (private cache) kZCoordinate (private cache)
  kNodeBlocked (currently unused - LONG) kNodeWidth (currently unused - LONG)

  kFirstData (LONG) Other relevant data is stored here. At level 0 you can find the x/y coordinates
                    of the underlying map location here. At other levels you find a list of
                    children. Arbitrary data can be stored in successive ID's, although there is
                    no guarantee it will be preserved if nodes are deleted out of the graph.


Prev: \ref Simulations Next: \ref Starting
*/

///////////////////////////////////////////////

/*! \page Starting Putting everything together

\section ALL Putting it all together

To define a new application, you can create a new directory in the apps/ folder.
To compile this applciation, type "make x" where "x" is the name of the folder you
created. In the folder you can put an .cpp and .h files that you want for your
application, but you must define the following functions somewhere inside this
directory:

\ref processStats

\ref createSimulation

\ref initializeKeyboardHandlers

\ref initializeCommandLineHandlers

The definitions for these functions are in "common.h", so you need to include that
file as well.

\section CLH Command-Line Handlers

The first thing you need to be concerned with is installing command line handlers.
These handles will allow you to process command-line arguments. By installing
handlers with text descriptions, it is possible to have the application automatically
print help for all command line arguments when it can't process them correctly.

Inside initializeCommandLineHandlers you really only need to call the function
\ref installCommandLineHanders. Here is an example:

installCommandLineHandler(myCLHandler, "-map", "-map <filename>", "Selects the default map to be loaded.");

A command-line handler looks something like this. It gets a pointer to the current argument list, where
the first argument is the parameter for the handler. The handler then processes as many arguments as
it wants, and returns how many arguments were processed.

int myCLHandler(char *argument[], int maxNumArgs)
{
	if (maxNumArgs <= 1)
		return 0;
	strncpy(gDefaultMap, argument[1], 1024);
	return 2;
}

Multiple handlers can be defined for the same argument. They will each get called in turn (no
order guarantees) until one of the handlers returns a value greater than 0. Given the command-line
arguments, you probably want to use a global variable to store any parameters that were set.

Given proper command-line arguments, you could just allocate your own simulation, run it,
and then exit the program, although you may want to do this in createSimulation, after all
command-line arguments have been handled, unless you can guarantee that a particular command-line
argument will always be last.

\section CS Creating the Simulation

The function \ref createSimulation is where you need to allocate a unit simulation. This is
where you can also set any of the parameters set from the command-line arguments. The simulation
will start running immediately. If you don't want it to start running, you can pause it here.

Here is a sample implementation:

void createSimulation(unitSimulation * &unitSim)
{
	Map *map;
	if (gDefaultMap[0] == 0)
		map = new Map(64, 64);
	else
		map = new Map(gDefaultMap);
	unitSim = new unitSimulation(new mapCliqueAbstraction(map));
}


\section KBH Keyboard Handlers

Keyboard handlers are similar to command-line handlers, in that you install any handlers to
allow your application to respond to keyboard events. By installing handlers, the program
can print out all legal key combinations it accepts. \ref initializeKeyboardHandlers might
look something like this:

void initializeKeyboardHandlers()
{
installKeyboardHandler(myDisplayHandler, "Toggle Abstraction", "Toggle display of the ith level of the abstraction", kAnyModifier, '0', '9');
}

In this case, any keys in the range 0..9 will be sent to the function myDisplayHandler, regardless of
any modifier keys that are down. It is important to note that modifier keys such as SHIFT can often
change the ASCII value that is passed to the keyboard handler. Keyboard handlers will be called with
the lowercase equivalent of the key that was pressed, but SHIFT-1 will be reported
as SHIFT-!, and so will not trigger this handler. Here is an example handler which implements
the above functionality.

void myDisplayHandler(unitSimulation *unitSim, tKeyboardModifier mod, char key)
{
  if (unitSim->getMapAbstractionDisplay())
    unitSim->getMapAbstractionDisplay()->toggleDrawAbstraction(((mod == kControlDown)?10:0)+(key-'0'));
}


\section PS Processing Stats

Each time a unit simulation is de-allocated, processStats is called first to allow your application
to save the stats or do any other processing on them.

Prev: \ref Abstractions Next: Memory

*/

///////////////////////////////////////////////

/*! \page Memory Memory Management

\section MEMORY Memory

It is important to use memory effienctly when building simulations that
run over extended periods of time.

Any time an object is added to the unit simulation, the unit simulation
is responsible for freeing that object. This includes, units, unitGroups,
and abstract maps. Maps, which are added to mapAbstractions, will be freed
by the mapAbstraction. Similarly, algorithms added to searchUnits will be freed
by the searchUnit when appropriate.

New code should follow the general guideline that when one object is added to
another, the parent object is in charge of freeing memory for the other object
upon termination. Units and unitGroups are both added to each other, but they
are also both added to the unit simulation, so the simulation is responsible
for deallocating both of these objects.

Prev: \ref Starting Next: \ref CVS
*/

///////////////////////////////////////////////

/*! \page CVS Using HOG with CVS

\section CVSUSAGE CVS

These instructions are for CVS users with a University of Alberta account.
HOG is currently not available to users outside the UofA.

To begin using HOG, do the following:

- First, request membership to the Unix group hog. To do this, e-mail Nathan
Sturtevant [nathanst].

- Set your CVSROOT shell variable to point to the hog CVS archive. Instructions
assume that you are using csh or tcsh. (You can change your shell to tcsh using "ypchsh", entering your password, and then /bin/tcsh as your login shell.) Each of these <i>setenv</i> commands can and probably should be placed in your .cshrc.user file:

setenv CVSROOT :ext:<i>login</i>\@games.cs.ualberta.ca:/usr/cvsroot

Replace <i>login</i> with your login name

- Set the access method to ssh: (This command should also appear in your .cshrc.user file so that it is set every time you log in.)

setenv CVS_RSH ssh

- [Optional] If you have a favorite editor, you can specify this:

setenv CVSEDITOR emacs

- Check out the the CVS archive:

cvs co project_hog

- After checking out the directory, you can change the root directory name to anything you want.

- You can test that things work:

make sample
./bin/sample

- To commit changes, you must first update your code to make sure there are no conflicts with
any of the code already in the archive:

cvs update -d -A

- Then, you can commit any changes:

cvs commit

- Please make sure you leave meaningful comments about the changes you've made to the code, in case
your changes need to be debugged later.


Prev: \ref Memory
*/

